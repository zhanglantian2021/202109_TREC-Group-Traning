##################
##GROUP TESTS##################
getw()
##################
##GROUP TESTS##################
getw()
##################
##GROUP TESTS##################
getwd()
setwd(C:/Users/Shankar Panthi/Desktop/0910")
#Second, open a new script file and save it with an appropriate name.  Import the data into R via a .csv file. Please remember that R is fussy about the titles of the columns. Assign the data to a dataframe called âsizeâ in R. Check the data using the summary() command. Make sure that each data column is of the correct type.
size <-read.table(file="height_shoesize.csv",header=T,row.names=NULL,sep=",")
summary(size)
dim(size)  #shows you the sample size (rows) and the number of columns
#1) Look at the distribution of the height data using a histogram
#show a histogram of the height data
hist(size$Height)
#2) Perform a 1-sample t-test checking whether humans are on average taller than 150 cm (1-tailed test)
#perform a 1-sample t-test checking whether humans are on average taller than 150 cm. (this is a 1-tail test)
t.test(size$Height,mu=150,alternative="greater")
dim(size)
#Note the output given by the test (mean, confidence intervals and significance of tests)
#3) Perform 2-sample t-test checking whether males differ in height from females (2-tailed test)
#perform a 2-sample t-test checking whether males differ in height from females
#here we ignore the 'alternative' argument and take its default case (a two-tailed test)
#two different formulations in R
t.test(size$Height~size$Gender)
t.test(Height~Gender,data=size)
#note the results are identical
#4) Perform 2-sample t-test checking whether females are shorter than males (1-tailed test)
#Note that now we specify the direction of the relationship using the âalternativeâ argument.
#perform a 2-sample t-test checking whether females are shorter than males
#here we require the 'alternative' argument to specify this is a one-tailed test
t.test(size$Height~size$Gender, alternative="less")
t.test(Height~Gender,data=size, alternative="less")
#Please note that the t-value does not change but the p-value changes. How does it change?
#5) Perform a 2-sample t-test checking whether females have smaller shoe-sizes than males
Adapt the code above to do thisâ¦
setwd("C:/Users/Shankar Panthi/Desktop/0910")
size <-read.table(file="height_shoesize.csv",header=T,row.names=NULL,sep=",")
dim(size)
hist(size$Height) #show a histogram of the height data
head(size)
t.test(size$Height,mu=150,alternative="greater")
dim(size)
t.test(Height~Gender,data=size)
#perform a 2-sample t-test checking whether males differ in height from females
#here we ignore the 'alternative' argument and take its default case (a two-tailed test)
#two different formulations in R
t.test(size$Height~size$Gender)
##or## t.test(size$Height~size$Gender)
t.test(Height~Gender,data=size, alternative="")
t.test(Height~Gender,data=size, alternative="less")
t.test(Height~Gender,data=size, alternative="")
t.test(Height~Gender,data=size, alternative="less")
t.test(Height~Gender,data=size, alternative="greater")
##or## t.test(size$Height~size$Gender)
##
t.test(Height~Gender,data=size, alternative="two.sided")
head(size)
t.test(Shoe_Size~Gender,data=size, alternative="two.sided")
t.test(Shoe_Size~Gender,data=size, alternative="less")
t.test(Shoe_Size~Gender,data=size, alternative="greater")
shapiro.test(size$Height)
qqplot(size$Height)
sppn <-read.table(file="yam.csv",header=T,row.names=NULL,sep=",")
head(sppn)
t.test(Height~Gender,data=size, alternative="greater")
dim(sppn)
hist(sppn$sppspr) #show a histogram
log(sppn$sppspr)
logsppspr=log(sppn$sppspr)
hist(logsppspr)
qqplot(logsppspr)
shapiro.test(logsppspr)
hist(sppn$sppwin)
logsppspr=log(sppn$sppwin)
logsppspr=log(sppn$sppwin)
hist(logsppwin)
hist(sppn$sppspr) #show a histogram
logsppspr=log(sppn$sppspr)
hist(logsppspr)
hist(sppn$sppwin)
logsppwin=log(sppn$sppwin)
hist(logsppwin)
t.test(logsppwin,logsppspr,paired=TRUE)
t.test(logsppwin,logsppspr,paired=TRUE, alternative="two.sided")
##############################################
####################################################
#######Paired-sample t-test#########
#############################################################
sppn <-read.table(file="yam.csv",header=T,row.names=NULL,sep=",")
head(sppn)
summary(size)
dim(sppn)
hist(logsppwin)
hist(logsppspr)
t.test(sppn$logsppwin,sppn$logsppspr,paired=TRUE, alternative="two.sided")
##############################################
####################################################
#######Paired-sample t-test#########
#############################################################
sppn <-read.table(file="yam.csv",header=T,row.names=NULL,sep=",")
head(sppn)
summary(size)
dim(sppn)
t.test(sppn$logsppwin,sppn$logsppspr, alternative="two.sided") #independent sample t-test
head(sppn)
t.test(sppn$logsppwin~aspect, alternative="two.sided") #independent sample t-test
wilcox.test(sppn$sppwin, sppn$sppspr, paired=TRUE)
##WICOXON signed-rank test##########
# checking mean test when the distribution is asymmetric)
wilcox.test(sppn$sppwin, sppn$sppspr, paired=TRUE, alternative="two.sided")
wilcox.test(sppn$sppwin, sppn$sppspr, paired=TRUE, alternative="less")
wilcox.test(sppn$sppwin, sppn$sppspr, paired=TRUE, alternative="greater")
wilcox.test(sppn$sppspr, sppn$sppwin, paired=TRUE, alternative="greater")
########################
wilcox.test(sppn$sppwin, sppn$sppspr)
##WICOXON signed-rank test##########
# checking mean test when the distribution is asymmetric)
wilcox.test(sppn$sppwin, sppn$sppspr, paired=TRUE)
plotNormalHistogram(sppn$sppspr)
library(rcompanion)
install.packages("rcompanion")
a
library(rcompanion)
plotNormalHistogram(sppn$sppspr)
plotNormalHistogram(sppn$logsppspr)
plotNormalHistogram(logsppspr)
##############################################
####################################################
#######Paired-sample t-test#########
#############################################################
sppn <-read.table(file="yam.csv",header=T,row.names=NULL,sep=",")
head(sppn)
summary(size)
plotNormalHistogram(sppn$logsppspr)
plotNormalHistogram(sppn$logsppwin)
t.test(sppn$logsppwin,sppn$logsppspr,paired=TRUE, alternative="two.sided")
t.test(sppn$logsppwin,sppn$logsppspr, alternative="two.sided") #independent sample t-test
size <-read.table(file="height_shoesize.csv",header=T,row.names=NULL,sep=",")
head(size)
summary(size)
dim(size)
hist(size$Height) #show a histogram of the height data
#library(rcompanion)
plotNormalHistogram(size$Height)
#library(rcompanion)
#plotNormalHistogram(size$Height)
logHeight=log(size$Height)
plotNormalHistogram(logHeight)
hist(logHeight)
plotNormalHistogram(logHeight)
setwd("C:/Users/Shankar Panthi/Desktop/0910/Prac 2a anova and regr in R")
setwd("C:/Users/Shankar Panthi/Desktop/0910/Prac 2a anova and regr in R")
#read in data file of type .csv
diver <-read.table(file="diver.csv",header=T,row.names=NULL,sep=",")
#check the basic stats and type of the data columns
summary(diver)
head(diver)
View(diver)
#plot distributions of variables
hist(diver$experience) #equal sampling from all groups hence the weird shape
View(diver)
hist(diver$respiration) #data is coarsely normal
diver_lm<-lm(respiration ~ experience, data=diver)
summary(diver_lm)
anova(diver_lm)
par(mfrow=c(2,2)) #this line splits the display panel into four parts
plot(diver_lm)
plot(diver$experience,diver$respiration)
lines(diver$experience, diver_lm $fitted)
diver_lm
# with as.factor()
diver_anova1<-aov(respiration ~ as.factor(experience), data= diver)
anova(diver_anova1)
summary(diver_anova1)
quartz()
windows()
plot(as.factor(diver$experience),diver$respiration)
# without as.factor()
diver_anova2<-aov(respiration ~ experience, data= diver)
anova(diver_anova2)
summary(diver_anova2)
plot(diver$experience,diver$respiration)
diver_anova3<-lm(respiration ~ as.factor(experience), data=diver)
anova(diver_anova3)
summary(diver_anova3)
tapply(diver$respiration, as.factor(diver$experience), mean)
getwd()
setwd("C:/Users/Shankar Panthi/Desktop/0910/Prac 2a anova and regr in R")
diver <-read.table(file="diver.csv",header=T,row.names=NULL,sep=",")
head(diver)
#plot distributions of variables
hist(diver$experience) #equal sampling from all groups hence the weird shape
hist(diver$respiration) #data is coarsely normal
library(rcompanion)
plotNormalHistogram(diver$respiration)
#library(rcompanion)
#plotNormalHistogram(diver$respiration)
qqplot(respiration~experience, data=diver)
#library(rcompanion)
#plotNormalHistogram(diver$respiration)
qqplot(respiration~experience, data=diver)
#library(rcompanion)
#plotNormalHistogram(diver$respiration)
qqplot(diver$respiration~diver$experience)
head(diver)
plot(diver$experience,diver$respiration)
lines(diver$experience, diver_lm $fitted)
diver_lm<-lm(respiration ~ experience, data=diver)#Fit a regression slope to interpret the results
plot(diver$experience,diver$respiration)#scatter plot
diver_lm<-lm(respiration ~ experience, data=diver)#Fit a regression slope to interpret the results
anova(diver_lm)
summary(diver_lm)
plot(diver_lm)
par(mfrow=c(2,2)) #this line splits the display panel into four parts
plot(diver_lm)
#library(rcompanion)
plotNormalHistogram(diver$respiration)
diver_lm
lines(diver$experience, diver_lm $fitted)
par(mfrow=c(2,2)) #this line splits the display panel into four parts
plot(diver_lm)
lines(diver$experience, diver_lm $fitted)
plot(diver$experience,diver$respiration)
lines(diver$experience, diver_lm $fitted)
lines(diver_lm $fitted)
#check residuals
par(mfrow=c(2,2)) #this line splits the display panel into four parts
plot(diver_lm)
###
lines(diver$experience, diver_lm $fitted)
diver_lm
# with as.factor()
diver_anova1<-aov(respiration ~ as.factor(experience), data= diver)
anova(diver_anova1)
summary(diver_anova1)
plot(as.factor(diver$experience),diver$respiration)
windows()
plot(as.factor(diver$experience),diver$respiration)
# without as.factor()
diver_anova2<-aov(respiration ~ experience, data= diver)
anova(diver_anova2)
summary(diver_anova2)
plot(diver$experience,diver$respiration)
diver_anova3<-lm(respiration ~ as.factor(experience), data=diver)
anova(diver_anova3)
summary(diver_anova3)
tapply(diver$respiration, as.factor(diver$experience), mean)
diver_anova3<-lm(respiration ~ as.factor(experience), data=diver)
anova(diver_anova3)
summary(diver_anova3)
tapply(diver$respiration, as.factor(diver$experience), mean)
??TukeyHSD
getwd()
getwd()
setwd("C:/Users/Shankar Panthi/Desktop/0910")
TukeyHSD(diver$respiration, which, ordered = FALSE, conf.level = 0.95, ...)
getwd()
setwd("C:/Users/Shankar Panthi/Desktop/0910")#set working directory
#########################
####TWO-WAY ANOVA#################
##################################
diver <-read.table(file="yam.csv",header=T,row.names=NULL,sep=",")
head(diver)
View(diver)# check type of the data columns
#########################
####TWO-WAY ANOVA#################
##################################
yam <-read.table(file="yam.csv",header=T,row.names=NULL,sep=",")
head(yam)
View(yam)# check type of the data columns
summary(yam)#check basic stats
View(yam)# check type of the data columns
#find mean and standard deviation spp richness for each treatment group
yam1 %>%
group_by(alt, LC) %>%
summarise(mean = mean(sppspr),
sd = sd(sppspr))
#find mean and standard deviation spp richness for each treatment group
yam %>%
group_by(alt, LC) %>%
summarise(mean = mean(sppspr),
sd = sd(sppspr))
library(dplyr)
#find mean and standard deviation spp richness for each treatment group
yam1 %>%
group_by(alt, LC) %>%
summarise(mean = mean(sppspr),
sd = sd(sppspr))
install.packages("dplyr")
library(dplyr)
#find mean and standard deviation spp richness for each treatment group
yam %>%
group_by(alt, LC) %>%
summarise(mean = mean(sppspr),
sd = sd(sppspr))
#plot distributions of variables
hist(yam$sppspr) #equal sampling from all groups hence the weird shape
hist(yam$logsppspr) #data is coarsely normal
View(yam)
#plot distributions of variables
hist(yam$sppspr) #equal sampling from all groups hence the weird shape
hist(yam$logsppspr) #data is coarsely normal
library(rcompanion)
hist(yam$logsppspr) #data is coarsely normal
library(rcompanion)
plotNormalHistogram(diver$respiration)
#plot distributions of variables
hist(yam$alt) #equal sampling from all groups hence the weird shape
hist(yam$logsppspr) #data is normal
plotNormalHistogram(yam$logsppspr)
#set margins so that axis labels on boxplot don't get cut off
par(mar=c(8, 4.1, 4.1, 2.1))
par(mar=c(8, 4.1, 4.1, 2.1))#set margins so that axis labels on boxplot don't get cut off
#create boxplots
boxplot(logsppspr ~ alt:LC,
data = yam,
main = "species richness",
xlab = "Group",
ylab = "species richness in spring",
col = "steelblue",
border = "black",
las = 2 #make x-axis labels perpendicular
)
#create boxplots
boxplot(logsppspr ~ LC:alt,
data = yam,
main = "species richness",
xlab = "Group",
ylab = "log species richness in spring",
col = "steelblue",
border = "black",
las = 2 #make x-axis labels perpendicular
)
#create boxplots
boxplot(logsppspr ~ LC,
data = yam,
main = "species richness",
xlab = "Group",
ylab = "log species richness in spring",
col = "steelblue",
border = "black",
las = 2 #make x-axis labels perpendicular
)
model <- aov(logsppspr ~ alt * LC, data = yam)
summary(model) #view the model output
model1 <- aov(logsppspr ~ alt * LC, data = yam)
summary(model1) #view the model output
## Independency: Observations in each groups are independent to each other
#Check normality#
#define model residuals
resid <- model1$residuals
#create histogram of residuals
hist(resid, main = "Histogram of Residuals", xlab = "Residuals", col = "steelblue")
plotNormalHistogram(resid)
#####################
#Check equality of variances##
library(car)
#conduct Levene's Test for equality of variances
leveneTest(logsppspr ~ alt * LC, data = yam)
#conduct Levene's Test for equality of variances
leveneTest(logsppspr ~ alt * LC, data = yam)
#conduct Levene's Test for equality of variances
leveneTest(logsppspr ~ LC * alt, data = yam)
leveneTest(logsppspr ~ LC * aspect, data = yam)
#perform Tukey's Test for multiple comparisons
TukeyHSD(model, conf.level=.95)
#perform Tukey's Test for multiple comparisons
TukeyHSD(model1, conf.level=.95)
as.string?
?
()
as.character(alt)
as.character(yam$alt)
#conduct Levene's Test for equality of variances
leveneTest(logsppspr ~ alt  * LC, data = yam)
as.list.numeric_version(yam$alt)
